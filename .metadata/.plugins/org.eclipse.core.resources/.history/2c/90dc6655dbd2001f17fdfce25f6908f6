package Projeto.labirinto.modelo;
import Projeto.labirinto.excecao.SairException;
import java.util.*;
import java.util.function.Predicate;

public class Tabuleiro {

	private int linhas;
	private int colunas;
	private int paredes;
	 private Campo campoAtual = null;
	private final List<Campo> campos = new ArrayList<>();
	public Tabuleiro(int linhas, int colunas, int paredes) {
		super();
		this.linhas = linhas;
		this.colunas = colunas;
		this.paredes = paredes;
		gerarCampos();
		associarOsVizinhos();
		sortearParedes();
	}
	private void gerarCampos() {
		for(int i=0; i<linhas; i++) {
			for(int j=0; j<colunas; j++) {
				campos.add(new Campo(i,j));
			}}}
	private void associarOsVizinhos() {
	    for (Campo c1 : campos) {
	        for (Campo c2 : campos) {
	            int deltaLinha = Math.abs(c1.getLinha() - c2.getLinha());
	            int deltaColuna = Math.abs(c1.getColuna() - c2.getColuna());
	            // Se c2 for um vizinho imediato de c1 (adjacente), associar
	            if (deltaLinha + deltaColuna == 1) {
	                c1.adicionarVizinho(c2);
	            }}}}
	private void sortearParedes() {
		long paredesFeitas =0;
		Predicate<Campo> murado = c -> c.isMurado();
		
		do {
			int aleatorio = (int) (Math.random() * campos.size());
			campos.get(aleatorio).murar();
			paredesFeitas = campos.stream().filter(murado).count();
		}while(paredesFeitas < paredes);
		}
	public boolean objetivoAlcancado() {
		return campos.stream().allMatch(c -> c.isAberto() || c.isMurado());
	}
	public void reiniciar() {
		campos.stream().forEach(c -> c.reiniciar());
		sortearParedes();
	}
	public void abrir(int linha, int coluna) {
		try {
			campos.parallelStream()
			.filter(c -> c.getLinha() == linha && c.getColuna() == coluna)
			.findFirst()
			.ifPresent(c -> {
				
			c.abrir();
			c.colocarPersonagem();});
			
			
		}catch(SairException e) {
			campos.forEach(c -> c.setAberto(true));
		throw e;
	}}
	public String toString() {
	    StringBuilder sb = new StringBuilder();
	    sb.append("  ");
	    for (int c = 0; c <colunas; c++) {
	    	sb.append(" ");
	    	sb.append(c); 
	    	sb.append(" ");
	    }
	    sb.append("\n");
	    int i = 0;
	    for (int l = 0; l < linhas; l++) {
	    	sb.append(l);
	    	sb.append(" ");
	        for (int c = 0; c < colunas; c++) {
				sb.append(" ");
				sb.append(campos.get(i));
				sb.append(" ");
				i++;
			}
			sb.append("\n");
		}
		
		return sb.toString();
		
	}
	
}
